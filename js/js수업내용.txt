자바스크립트는 css나 html에서 만든 내용을 바탕으로 무엇인가 실행시킬 때 어떤 행동을 취할 것인가를 정해주는 언어.

1.  소스코드를 읽어서 브라우저가 잘 읽어냈지만, 클릭했을 때 행동이 취해진 후 새로운 코드가 작성된다.
2.  클릭 시 돼지와 말의 그림이 바뀌도록 설정
3.  클릭 시 하트가 채워지는 설정.
4.  Dom : 브라우저가 코드를 해석해서 페이지에 표시도 하고, element도 작성하는데, 객체로 만들어서 메모리에 올림.
    html을 객체로 만든 형태. document객체를 선택해야 html파일의 수정이 가능함.
    크롬 웹브라우저에서 우클릭 > 검사 에서 console창에서 자바스크립트를 작성할 수 있다.
5.  dom을 통해 element의 정보를 받아 올 수 있다. 없는 값일 경우 null이 뜸.
6.  id통해서 가져오는 element정보는 1개, class통해서 가져오는 element정보는 여러개가 가능함.
    여러개를 가져온 class element정보는 특정요소만 선택해서 사용가능.
7.  tag명으로 요소 가져오기
8.  css셀렉터를 통해서도 element의 내용을 가져올 수 있음. 
9.  querySelector는 하나의 요소만 가져올 수 있다.
    document.querySelector("h1"); //h1으로 선택시 여러개의 h1 element중 첫번째 element만 선택됨.
    document.querySelector("p") //p으로 선택시 여러개의 p element중 첫번째 element만 선택됨.
10. .innerHTML - 태그내용안의 content정보 얻어옴. dom tree를 만들어서 document객체로 넘긴다.
    자바스크립트를 통해 dom에 있는 내용을 바꿀 수 있다. 페이지의 소스는 바뀌지 않는 상태
12. 순차적으로 코드를 읽어감. 실행순서가 중요해서 스크립트 element는 body 종료캐그와 가깝게 하여 작성.
14. <input> - 입력창을 만드는 태그 value는 초기값. value의 길이가 3이상일때와 이하일때의 값 변경 설정.
15. element의 정보를 받아서 javascript로 style정보를 세팅할 수 있음.
    camel case(낙타 등) - fontSize 합성어일경우 대문자로 구분 
    kebab case(꼬치) - font-size 합성어일경우 - 로 구분 
    snake case(뱀) - font_size FONT_SIZE 합성어일경우 _ 로 구분
16. input값에 따라 color와 backgroundColor를 변경하는 기능.
17. 조건에 따라 화면에 글씨를 드러내거나 숨기는 기능.
18. 중복되는 코드는 변수를 사용하여 코드길이를 줄일 수 있다.
19. javascript statement(명령문)는 script요소안에 작성됨.
    브라우저에 전달하는 하나의 의미있는 명령.
    ; (semicolon)으로 끝남. 필수는 아니지만 구분하기 위해 사용 할 것.
    javascript프로그램은 하나의 명령문들의 set.
    작성된 순서대로 실행됨.
20. script태그는 어디있어도 상관없지만 위에서부터 차례대로 실행됨.
21. //<- 주석처리 주석으로 처리되면 실행되지 않음. 소스코드는 보여짐. 민감한 정보는 작성하지 말 것.
    /* */ 범위주석처리 코드의 설명을 달고 싶을때 사용.
22. 3, 5 :literal value - 값자체를 나타냄.
    variable - 반복적인 literal value를 사용 시 사용.
    변수 선언시 let <- 키워드 사용. 
    let a = 8<- a라는 변수 선언한것. a에 8을 할당. 다른 값으로 변경하여 할당 가능.
23. 변수 선언 후 다른 state에서 다른값을 넣어서 사용 가능.
24. 값을 할당하지 않은 채로 사용하면 undefined.
    할당하지 않은 채로 사용하는것을 주의 할 것.
    변수명 작성규칙 - 영문대소문자, 숫자, _, $조합으로 작성가능.
    단, 숫자로 시작하면 안되고, javascript 키워드(예약어) 사용도 안 됨.
    변수명 작성 관습 (javascript naming convention) - 변수명은 lowerCamelCase로 작성.
25. 숫자로 변수값을 할당한 후 문자로 변수 재할당 가능. 문자로 변수값을 할당한 후 숫자로 변수 재할당 가능.
26. alert() - 경고창이 뜨는 함수. ()안의 내용이 출력.
27. javascript로 작성하여 html문서의 내부를 변경할 수 있음.
29. const를 사용하여 상수로 고정시킬 수 있음. 값을 변경하지 못함.
30. javascript의 값의 타입(자료형, data type) - number, string(문자열), boolean, object, function, undefined
    큰따옴표 안에 큰따옴표를 또 사용하고 싶으면 \"을 사용하여 큰따옴표를 쓰면 사용이 가능하다.
31. 연산자 - 할당(assignment) - =, +=, *=, /=, -= 등등
             산술(arithmetic) - +, -, *, /, % 등등
             비교(comparison) - <, >, <=, >=, ==, ===, !=. !==
             논리(logical)  - &&, ||, ^
32. 산술연산자 - 이항연산자 : +, -, /, *, %
                 단항연산자 : ++, --
33. 함수 - 나중에 실행되도록 만들어진 코드의 모임.
34. +연산 : 연산의 결과는 사용하는 연산자의 피연산자타입에 따라 결과가 달라짐.
            피연산자가 모두 number면 결과는 number, 피연산자중 하나라도 string이면 결과는 string(연결연산자 concatenate로 판단)
35. 형변환 필요 - +연산을 제대로 하기 위해 필요. String-> Number 여러방법이 존재. Number함수 사용.
                                                 Number-> String 여러방법이 존재. ToString함수 사용.
36. +연산자는 왼쪽에 있는 연산자부터 우선연산. *연산자는 일반적인 연산과 같이 *부터 먼저 계산
    우선순위가 가장 높은 괄호()를 사용해서 연산순서를 코드에 표시되도록하여 헛갈리지 않게 해야함.
37. 할당연산자 - a += 2 -> 현재값에 2를 더해서 할당. a = a + 2와 같음.
                 a -= 3 -> 현재값에 3을 빼서 할당. a = a - 3과 같음.
                 a *= 5 -> 현재값에 5를 곱해서 할당. a = a * 5와 같음.
                 a /= 2 -> 현재값에 2를 나눠서 할당. a = a / 2와 같음.
                 a %= 2 -> 현재값에 2를 나눈 나머지를 할당. a = a % 2와 같음.
38. boolean type - 값 : true, false
39. 비교연산자
    같다, 같지않다, 크다, 크거나 같다, 작다, 작거나 같다.
     ==    !=          >       >=        <         <=
     ===   !==
    연산의 결과는 boolean 값을 가진다.
    다른타입끼리 비교(가능하지만 권장하지 않음)
    === 값도 같고, type도 같은가?, !== 값도 다르고, type도 다른가?
    다른타입끼리 비교할 때, 피연산자의 타입이 하나라도 number이면 두개의 피연산자를 모두 number로 변환해서 비교.
    문자열끼리는 문자의 아스키코드순서로 비교. 특별한 이유가 없는한 같은 타입끼리 비교해야 함. -> 형변환으로 type맞춘 후 비교
40. if문 - conditional statement(조건문), branch(분기문)
41. code block안의 코드는 꼭 들여쓰기 할 것
43. if else문 - if안의 code block의 결과가 실행 안할시 실행되는 code block
44. (a % 2) == 0 -> 연산이 한문장에서 여러번 실행될 시 우선순위표시를 위해 () 표시 꼭 할 것.
45. else if는 위 if의 조건이 false일때만 조건 확인.
    중간에 하나라도 조건이 true이면, 그 뒤의 code block은 실행 안하고 건너뛴다.
    else는 위에서 일어난 모든 조건들이 false일때만 실행
46. 형변환 할 시 한줄에 다 표현하지 말고, 2줄에 나누어서 할 것(가독성).
48. 논리연산자 - and && : 피연산자가 2개, 피연산자의 type은 boolean, 연산결과는 boolean
                   결과 : 두 피연산자가 모두 true일때만 true, 나머지는 모두 false.
                  or || : 피연산자가 2개, 피연산자의 type은 boolean, 연산결과는 boolean
                   결과 : 두 피연산자가 모두 false일때만 false, 나머지는 모두 true.
                  not ! : 피연산자가 1개, 피연산자의 type은 boolean, 연산결과는 boolean
                   결과 : 피연산자가 true이면, false. 피연산자가 false이면, true.
50. Math.random() - 0보다 크거나 같고, 1보다 작은 임의의 수를 리턴.
52. 삼항연산자 - a ? b : c의 형식으로 작성. 결과는 a가 true이면 b, a가 false이면 c
54. code block의 명령문이 하나면 중괄호 생략 가능함. 하지만, 꼭 작성할 것.
55. 선언된 변수는 (코드)블럭 안에서만 사용가능.
56. function : 나중에 실행시키기 위한 명령문을 모아둔 코드블럭
               함수호출(실행, call, invoke), a() <- 함수 실행 코드, 여러번 호출가능.
57. function hello()이나, let hello = function () 형식으로 선언 가능.
58. parameter(매개변수) : 함수 내에서 사용하는 변수, 값을 호출할 때 받는다.
    argument(인자, 인수) : 넘겨준 값.
    javascript는 type에 민감하지 않기 때문에 아무 자료형이나 넣어도 실행된다.
59. let printDouble = function (a) <- 이런식으로 함수선언 후 ()안에 parameter를 넘겨준다.
60. parameter에는 모든 자료형이 들어갈 수 있다.
61. parameter에 값을 넣지 않을 수 있다. 그러면 그 파라미터는 undefined인 상태이다.
62. parameter순서와 개수에 맞게 매칭해서 사용.
64. ()에서 선언한 것은 code block안에서 선언한 것으로 서로 충돌나지 않음. lowerCamelCase로 작성
66. return : 1. 함수 종료, 2. return키워드 오른쪽에 있는 값을 호출한 곳으로 반환(return)
             return명령문이 실행되면 return아래의 명령문은 실행되지 않는다.
70. object {}(객체, 개체) : 1. 속성(property) - 값(value, attribute, field)
                            2. 메소드(method) - 기능(function, action)
                            속성 + 메소드를 멤버라고 함.
    속성(property) - name : value형식으로 작성. 객체안에 있는 property는 .으로 연결하여 사용.
71. 각 property는 , 로 구분. property작성시 각 줄로 들여쓰기 해서 작성할 것.
                     property의 순서는 중요치 않음.
73. property와 method를 같이 사용해도 구분은 , 로 똑같이 함.
    메소드(method) - 객체가 가진 함수. 함수 - 객체가 없어도 생성가능. method보다 큰 개념.
74. return시 {}로 묶어서 여러개의 값을 동시에 적용하여 return가능.
79. 내부에서 같은 object내의 property를 접근하여 사용 가능.
    외부에서 method를 추가하여 사용가능.
    this : 함수를 소유한 객체. 어떤 함수를 소유한 객체가 함수 내부에서 객체 자기자신을 가리킬때 사용.
81. object : {}로 묶어서 표현, property(속성)과 method를 정의 할 수 있다.
             javascript는 모두 객체로 이루어져 있다.
             String : " ", ' '에 담아서 작성.

86. array : 배열, 여러 값을 가지고 있는 객체(object)
            각 값은 index로 구분된다. index는 공간안의 순서번호임. [] 괄호 사용. 각 값은 구분해서 사용.
            배열의 각 값은 다른 타입이어도 됨.
            length속성 활용해서 마지막 index의 값 접근.
            마지막 index === length속성 - 1
87. push() 메소드 : 마지막에 아이템 추가
88. for : 반복문 (loop). ()안에 3개의 명령문작성. 1번 : 초기값, 2번 : 실행조건, 3번 : 증감명령문
          실행순서 - 1번 -> 2번 true -> 코드블럭 -> 3번 -> 2번
                         -> 2번 false -> 종료
98. for문() 안에서 i를 정의하고 쓰면, for문의 {}안에서만 적용됨.
    for문 안에서 let이나 const를 꼭 써서 변수정의 할 것.
A1. while문 조건이 맞지 않으면 반복문 실행 X, dowhile문 조건이 맞지 않더라도 무조건 한번은 실행
A2. break : break문에서 가장 가까운 loop를 종료.
A5. continue : 루프를 한번만 건너뜀. 필요한 부분만 건너 뛸 수 있음.
A9. switch case : key값과 case의 값을 위에서부터 순서대로 비교하여 같은 값만 실행.
                  값이 나오는 코드는 모두 ()안에 들어갈 수 있음.
                  키워드가 일치하지 않을 경우, default에서 적용시킬 코드를 작성 할 수 있다.
B1. break문 작성시 의도하지 않은 결과가 나올 수 있음. 
    case가 끝나지 않고, 일치되지 않는 다음 statement키값의 명령을 실행한다.
    일치되는 키값을 여러개도 지정 가능.
B2. javascript에서 switch case문은 ===(내용의 값과 type명까지 동시 비교) 비교를 함.
B4. property에 함수를 넣어서 실행시킬 수 있음. 가능하면 분리시켜서 쓸 것. 

연산자 우선순위 외우면 좋음. 검색, 문서 찾아보는 연습 할것.
79,80 0217